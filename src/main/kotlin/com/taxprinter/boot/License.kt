package com.taxprinter.boot

import com.google.gson.Gson
import com.taxprinter.models.Hardware
import com.taxprinter.models.LicenseDTO
import io.dropwizard.servlets.assets.ByteRange
import org.apache.commons.codec.digest.HmacAlgorithms
import org.apache.commons.codec.digest.HmacUtils
import org.apache.commons.io.IOUtils
import org.apache.commons.ssl.PKCS8Key
import oshi.SystemInfo
import java.text.SimpleDateFormat
import java.util.*
import oshi.hardware.HardwareAbstractionLayer
import java.util.Calendar
import java.io.ByteArrayInputStream
import java.io.File
import java.io.InputStream
import java.security.spec.PKCS8EncodedKeySpec
import java.security.KeyFactory
import java.security.interfaces.RSAPrivateKey
import java.security.interfaces.RSAPublicKey
import javax.crypto.Cipher
import java.security.PublicKey




/**
 * Created by george on 31/07/16.
 */
class License {
    companion object {

        val pbk = arrayOf(
                0x30, 0x82, 0x04, 0xE9, 0x30, 0x1B, 0x06, 0x09, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x05, 0x03,
                0x30, 0x0E, 0x04, 0x08, 0x80, 0xA2, 0xFE, 0x75, 0xD3, 0x1B, 0xE1, 0x6E, 0x02, 0x02, 0x08, 0x00, 0x04,
                0x82, 0x04, 0xC8, 0x70, 0x28, 0x74, 0xC3, 0x1B, 0x15, 0xD5, 0x3C, 0x8C, 0x44, 0xB1, 0xA9, 0x99, 0xB9,
                0xBF, 0x74, 0xDF, 0x38, 0xA9, 0xF9, 0x0E, 0xF8, 0xE9, 0xCD, 0x21, 0xC5, 0x12, 0xC9, 0x43, 0x64, 0x58,
                0xF3, 0x7C, 0x1A, 0x78, 0x16, 0xC8, 0xB2, 0x0D, 0xD6, 0x54, 0x77, 0x14, 0x00, 0x66, 0xDA, 0xFF, 0x5A,
                0x4B, 0x74, 0x38, 0xFA, 0x2A, 0x32, 0x6C, 0x1C, 0x6E, 0xC7, 0xD9, 0x83, 0x71, 0x9F, 0x33, 0xA8, 0x3C,
                0x25, 0xBE, 0x92, 0x91, 0xAC, 0x71, 0x54, 0xD5, 0xE2, 0xC4, 0xFB, 0x58, 0xBA, 0xA2, 0x4D, 0xB2, 0x35,
                0x00, 0x5B, 0x3C, 0x0F, 0x0E, 0x9B, 0x5A, 0x4D, 0xBF, 0x17, 0x9F, 0x3B, 0x5D, 0xA5, 0x66, 0xDF, 0xD7,
                0xFA, 0xD6, 0x7A, 0x09, 0xF9, 0x7D, 0xCB, 0xC0, 0x56, 0x36, 0x55, 0x1B, 0x78, 0x35, 0xA4, 0xA3, 0x4B,
                0xC6, 0xB9, 0xAA, 0x07, 0x69, 0x8A, 0x7F, 0x28, 0xA3, 0x4B, 0x7C, 0x1C, 0x1B, 0x28, 0x8E, 0xB0, 0xA3,
                0x0F, 0x6B, 0x36, 0xE4, 0x21, 0xCD, 0x7B, 0x83, 0xE9, 0x37, 0x09, 0x28, 0x12, 0x71, 0xED, 0x77, 0x97,
                0x64, 0xD4, 0xE7, 0xFB, 0xB1, 0xAD, 0x25, 0x14, 0x29, 0x09, 0x3C, 0x1F, 0xC9, 0x44, 0x2C, 0xE3, 0x7B,
                0x17, 0xA3, 0xBE, 0x68, 0x2D, 0x03, 0xC1, 0xDA, 0x80, 0xFD, 0x7A, 0x9A, 0x37, 0xF0, 0xB2, 0xAF, 0xC7,
                0x3B, 0x17, 0x44, 0x2D, 0xE4, 0xFE, 0xFB, 0x99, 0x5C, 0xCD, 0x93, 0x11, 0x9C, 0xF9, 0x39, 0x65, 0xB9,
                0x7E, 0x52, 0x13, 0x06, 0x5A, 0x34, 0xAF, 0xD2, 0x08, 0x6D, 0x49, 0x33, 0xF1, 0xD8, 0x5F, 0xDC, 0x78,
                0x8B, 0x26, 0x47, 0xC4, 0x98, 0x0E, 0x65, 0xA6, 0x54, 0xE0, 0x8E, 0x11, 0x60, 0x12, 0x13, 0xBF, 0x09,
                0x45, 0x8C, 0xBE, 0x20, 0x09, 0xB9, 0x90, 0x1F, 0xD3, 0x50, 0xDD, 0xCA, 0xEE, 0x72, 0x93, 0xB6, 0x06,
                0x64, 0x37, 0xE2, 0x2F, 0x77, 0xB3, 0xBB, 0xC4, 0xC4, 0xC2, 0x54, 0x55, 0x55, 0x97, 0xD9, 0xBA, 0x5E,
                0xF7, 0xC9, 0xA1, 0xAA, 0x43, 0x2A, 0xB6, 0x66, 0xBC, 0x0D, 0x83, 0x6B, 0x1A, 0xCD, 0x25, 0xB6, 0x31,
                0x42, 0x33, 0xCB, 0xD5, 0xAA, 0xEB, 0xD6, 0x0A, 0x5C, 0x17, 0x79, 0x0E, 0x50, 0x6D, 0xDB, 0x5B, 0x86,
                0x6C, 0xCE, 0x61, 0x3F, 0x39, 0x5C, 0xAE, 0x1B, 0x1C, 0x71, 0x19, 0x70, 0x1F, 0x15, 0x54, 0xC0, 0x74,
                0x23, 0xFD, 0x69, 0x4F, 0x30, 0xB5, 0xBC, 0x6D, 0xCF, 0x03, 0x04, 0x50, 0x4C, 0x74, 0x00, 0x58, 0xFE,
                0x98, 0xCB, 0x9A, 0x55, 0x48, 0x94, 0xDE, 0xAE, 0x47, 0x75, 0x04, 0x44, 0xE3, 0xDC, 0x6F, 0x33, 0xA5,
                0x16, 0x2A, 0xB8, 0x10, 0x1E, 0xDA, 0xD8, 0x3B, 0x25, 0xCB, 0x9B, 0x9C, 0x96, 0xB9, 0x2A, 0xAE, 0xB4,
                0x24, 0x82, 0x07, 0xEE, 0xB5, 0xFE, 0x46, 0x01, 0xC0, 0xDE, 0x79, 0x29, 0xE3, 0xAC, 0x8F, 0x93, 0x7B,
                0x49, 0xC1, 0x65, 0x4E, 0x57, 0x1C, 0xB0, 0x27, 0x4D, 0xDD, 0x74, 0xC0, 0x69, 0x4A, 0xD5, 0xA3, 0x3D,
                0x9B, 0x8B, 0x69, 0x0B, 0x1F, 0x2F, 0xF3, 0x7C, 0x90, 0x3E, 0xFD, 0xE4, 0xD6, 0xD1, 0xB4, 0x49, 0x03,
                0xF6, 0x5A, 0x7F, 0xDD, 0x5B, 0x62, 0x62, 0xED, 0x4A, 0xC0, 0x4D, 0x3D, 0xBB, 0xEC, 0xB6, 0x15, 0x70,
                0x6D, 0xCF, 0x3E, 0xE8, 0x47, 0xC9, 0x44, 0x28, 0xBC, 0x41, 0x96, 0xA9, 0xDB, 0x2C, 0x90, 0x94, 0x8C,
                0x10, 0xA5, 0x86, 0x18, 0x94, 0xE2, 0x59, 0xC2, 0x7E, 0x7F, 0x85, 0x63, 0xF6, 0xB9, 0x30, 0x00, 0x38,
                0x12, 0x24, 0x8F, 0x3C, 0xAE, 0x8E, 0x08, 0x3B, 0xDA, 0x4D, 0xA8, 0x57, 0x0B, 0x18, 0xDF, 0x33, 0x2E,
                0xE9, 0xDC, 0x70, 0x4D, 0x0A, 0xBD, 0x1A, 0x50, 0x91, 0xDB, 0x1A, 0xCD, 0x75, 0x40, 0x41, 0x5C, 0x57,
                0xFA, 0xD8, 0x84, 0x5A, 0x55, 0xBD, 0xEA, 0x59, 0xCC, 0x98, 0x8F, 0xA2, 0xF9, 0xD2, 0xD5, 0x01, 0xD2,
                0x64, 0x68, 0xAA, 0xDD, 0x69, 0xAA, 0x6F, 0x54, 0x68, 0x32, 0x78, 0x57, 0xF9, 0xCA, 0xEF, 0xCB, 0xCB,
                0x8A, 0x7C, 0x07, 0x0C, 0x16, 0x04, 0x4E, 0xB4, 0xA1, 0x17, 0xB8, 0x80, 0x9A, 0xE6, 0x47, 0x0E, 0x09,
                0xC8, 0xED, 0x75, 0x5C, 0x81, 0x61, 0xEB, 0xF8, 0xA9, 0x3B, 0x2E, 0x8D, 0x25, 0x9B, 0x1A, 0x1D, 0xF7,
                0x26, 0x94, 0x73, 0xD1, 0x80, 0x3B, 0x6A, 0xA3, 0xB7, 0x38, 0x59, 0x5D, 0x31, 0xF6, 0x29, 0xFD, 0xAC,
                0x90, 0x20, 0x15, 0x49, 0x3D, 0x15, 0xA4, 0x6F, 0xDF, 0x4D, 0x6F, 0x07, 0x20, 0x1B, 0xAB, 0x4F, 0x2E,
                0x98, 0x33, 0xE4, 0x11, 0x4F, 0x7D, 0x12, 0x80, 0xB2, 0x10, 0x16, 0xFF, 0xF6, 0x42, 0x1D, 0x44, 0xBE,
                0xC7, 0xF8, 0x24, 0x58, 0xF7, 0x9C, 0xC8, 0x9E, 0x87, 0xAE, 0x74, 0x59, 0xC4, 0xE7, 0xEE, 0xAB, 0x15,
                0x89, 0xA9, 0x2E, 0xC0, 0x9C, 0xE4, 0x9B, 0x72, 0xEC, 0x81, 0x23, 0xEB, 0x61, 0x57, 0x94, 0x7E, 0x81,
                0x3E, 0xAD, 0x1C, 0xB9, 0x6E, 0x85, 0x9A, 0x82, 0x17, 0xBA, 0xFC, 0x46, 0x1F, 0x5F, 0xD2, 0xFE, 0xA6,
                0xA6, 0x65, 0x97, 0x44, 0x80, 0x77, 0xEB, 0x1C, 0x7A, 0xA9, 0x90, 0x82, 0xBA, 0xC4, 0x3A, 0xF3, 0x8D,
                0x18, 0x0A, 0xDE, 0xF7, 0x2A, 0xD9, 0xFC, 0xA7, 0x0F, 0xDD, 0xFB, 0x0A, 0x94, 0x8C, 0x40, 0x30, 0x5F,
                0x5F, 0xC3, 0xC7, 0x9D, 0x8F, 0xE9, 0x3E, 0x30, 0x94, 0x0D, 0x19, 0xA9, 0xF4, 0xF5, 0xF6, 0x92, 0xAB,
                0xC3, 0x8D, 0x42, 0x1A, 0xCB, 0x00, 0x16, 0x5F, 0x80, 0x40, 0xE7, 0xA6, 0xC1, 0x98, 0x61, 0xE5, 0x1C,
                0xF5, 0x4E, 0xAE, 0xDB, 0xF5, 0x55, 0x28, 0x42, 0xA7, 0xD3, 0xA5, 0xBF, 0xE4, 0x81, 0x47, 0xF8, 0xB2,
                0xD8, 0xF7, 0xE7, 0x37, 0xA9, 0xFB, 0x7F, 0xE2, 0x97, 0xF2, 0x46, 0x04, 0xCD, 0x56, 0x79, 0x23, 0xB5,
                0x24, 0x98, 0xD7, 0x1D, 0x64, 0x4D, 0xA5, 0x71, 0x54, 0x61, 0x21, 0xB0, 0x6A, 0x14, 0x5E, 0x58, 0xE0,
                0x94, 0x76, 0x81, 0x9E, 0xD1, 0x0C, 0xC3, 0xD5, 0x42, 0xD4, 0x6B, 0x6A, 0xEA, 0xA0, 0xA7, 0x93, 0x06,
                0xB7, 0x52, 0x7E, 0xA5, 0xF3, 0x78, 0x92, 0x1B, 0xB7, 0x44, 0x8F, 0x13, 0xC1, 0xD8, 0x9D, 0x7E, 0xA5,
                0xE1, 0xC9, 0x39, 0xCB, 0xFB, 0x83, 0xF7, 0x36, 0x0A, 0x28, 0xB0, 0xC8, 0xE1, 0x83, 0x37, 0x23, 0x57,
                0x2F, 0x9D, 0x59, 0xFC, 0xC5, 0x85, 0xF0, 0x4C, 0xFB, 0xE5, 0xD8, 0xB7, 0x84, 0x75, 0xB0, 0x9F, 0x26,
                0x1E, 0x78, 0xB9, 0xBB, 0xE1, 0xD2, 0xF4, 0xE7, 0x27, 0x6C, 0x68, 0xCA, 0x57, 0x61, 0x88, 0x8B, 0xBE,
                0x23, 0x2D, 0x2F, 0x72, 0x01, 0x21, 0xDF, 0xF0, 0x92, 0x6F, 0xDF, 0xF4, 0x02, 0x00, 0x0A, 0xCA, 0xF0,
                0xDD, 0x7A, 0xE9, 0x62, 0x74, 0x13, 0x5F, 0x32, 0xAE, 0x29, 0x08, 0x19, 0x62, 0xA0, 0x46, 0xDC, 0x65,
                0xBE, 0x41, 0x7C, 0xB8, 0x30, 0x40, 0xE0, 0x51, 0x3E, 0x16, 0x58, 0x20, 0xA4, 0x56, 0x6F, 0xCF, 0x61,
                0xC6, 0xB7, 0xDD, 0xBC, 0xE1, 0x39, 0xB0, 0x94, 0xBC, 0x42, 0xCF, 0xAA, 0x43, 0x01, 0x06, 0x31, 0xE4,
                0xF5, 0xA5, 0x2D, 0x80, 0x72, 0xB7, 0x51, 0x60, 0xA1, 0x15, 0x9A, 0xC1, 0x44, 0xA7, 0x3C, 0xAF, 0xE1,
                0x03, 0xFB, 0x5D, 0x65, 0x7C, 0x7F, 0x9F, 0xF3, 0x44, 0x40, 0x25, 0xCD, 0x4C, 0x47, 0x13, 0xC3, 0xB7,
                0x60, 0x3C, 0xC5, 0x36, 0xF1, 0xB0, 0x25, 0xC8, 0x74, 0xA7, 0x6B, 0x27, 0x12, 0x03, 0x43, 0x26, 0x7E,
                0xA6, 0x02, 0xEE, 0xD6, 0xFD, 0x27, 0xF7, 0x1A, 0x0C, 0x6F, 0xC7, 0xD9, 0x53, 0xB9, 0x34, 0x35, 0x0B,
                0x74, 0xC0, 0xAF, 0x63, 0x5B, 0x78, 0x06, 0x42, 0x9A, 0x4D, 0x09, 0x52, 0x71, 0xAC, 0xBA, 0x0C, 0xB6,
                0x08, 0xA8, 0xB1, 0x4D, 0x64, 0x9D, 0x9B, 0x54, 0x56, 0xC1, 0xE9, 0x3D, 0xBC, 0xDE, 0x7E, 0xAC, 0xE7,
                0x0B, 0xED, 0xF6, 0x64, 0x5F, 0x6F, 0xB4, 0x84, 0x03, 0x75, 0x11, 0xDC, 0x5F, 0xF2, 0x66, 0x36, 0x79,
                0x14, 0xAB, 0x54, 0x6F, 0xEA, 0xC1, 0xDC, 0xB0, 0xA1, 0x16, 0x2A, 0xAE, 0x9F, 0x26, 0x25, 0x40, 0x8B,
                0x16, 0xA2, 0xFB, 0x74, 0x3B, 0x2F, 0xEB, 0xAE, 0x1E, 0xA0, 0xA6, 0x6C, 0xA5, 0x92, 0xB4, 0x86, 0x12,
                0x27, 0xEF, 0x22, 0x7E, 0xE7, 0xF5, 0x84, 0xA0, 0xD0, 0xDB, 0x09, 0xE0, 0xFA, 0x38, 0xF9, 0xC6, 0x84,
                0xD0, 0x1C, 0x1B, 0x6A, 0xF9, 0x84, 0x24, 0xB1, 0xF0, 0x8E, 0xA6, 0x1D, 0x43, 0xFD, 0x7B, 0x1F, 0x08,
                0xC4, 0x65, 0x22, 0x7F, 0x58, 0xAB, 0xF2, 0xA4, 0x3B, 0x4B, 0xE4, 0x51, 0x19, 0xB3, 0xDD, 0xD7, 0x0A,
                0x04, 0xAD, 0x37, 0x73, 0x97, 0xEE, 0x5F, 0xCC, 0xF0, 0x64, 0x35, 0xEE, 0x03, 0xCC, 0xCF, 0x5D, 0xE6,
                0xEA, 0x17, 0x56, 0xAF, 0xDD, 0x34, 0x7D, 0x04, 0x4B, 0x10, 0xC3, 0x41, 0x87, 0x16, 0x40, 0x4A, 0x49,
                0x62, 0x7C, 0xE4, 0xD6, 0xDF, 0xF2, 0x72, 0x0F, 0x14, 0x35, 0x69, 0x70, 0xD0, 0x16, 0x82, 0x96, 0x15,
                0x96, 0xAB, 0x92, 0x3F, 0xAB, 0x60, 0x03, 0x14, 0xF9, 0x40, 0x38, 0xE6, 0x35, 0x1B, 0x5F, 0x15, 0xD6,
                0xA4, 0x05, 0xA8)

        val hal = SystemInfo().hardware

        val pp = byteArrayOf(0x49, 0x46, 0x6F, 0x64, 0x53, 0x5A, 0x6A, 0x69, 0x46, 0x69, 0x31, 0x41, 0x67, 0x56, 0x72,
                0x36, 0x55, 0x61, 0x35, 0x49 )

        fun readKey(): RSAPrivateKey {

            val pbkbytes = pbk.foldIndexed(ByteArray(pbk.size)) { i, a, v -> a.apply { set(i, v.toByte()) } }

            val pbks = ByteArrayInputStream(pbkbytes)

            val ppc = String(pp, charset("ASCII")).toCharArray()

            val pkcs8 = PKCS8Key(pbks, ppc)

            val decrypted = pkcs8.decryptedBytes

            val spec = PKCS8EncodedKeySpec(decrypted)

            val pubKey = KeyFactory.getInstance("RSA").generatePrivate(spec) as RSAPrivateKey

            return pubKey

        }

        fun decrypt(encrypted: ByteArray): ByteArray {
            val cipher = Cipher.getInstance("RSA")
            cipher.init(Cipher.DECRYPT_MODE, readKey())

            return cipher.doFinal(encrypted)
        }

        fun readLicense(license: ByteArray): LicenseDTO {
            val gson = Gson()

            val unencrypted = decrypt(license)

            val license = gson.fromJson(String(unencrypted), LicenseDTO::class.java)

            return license

        }

        fun uniqueId(): Hardware {
            val cs = hal.computerSystem
            val cpu = hal.processor
            val boardSerial = cs.baseboard.serialNumber
            val equipmentSerial = cs.serialNumber
            val cpuId = cpu.processorID

            val allTogether = boardSerial + equipmentSerial + cpuId
            val uniqueId = org.apache.commons.codec.digest.DigestUtils.sha256Hex(allTogether)

            return Hardware(uniqueId, boardSerial, equipmentSerial)

        }


        fun check(): Boolean {

            val inputStream: InputStream = File("license.bin").inputStream()

            val licenseBytes = IOUtils.toByteArray(inputStream)

            val license = readLicense(licenseBytes)

            val hardware = uniqueId()

            val dt = license.emissionDate  // Start date
            val sdf = SimpleDateFormat("yyyy-MM-dd")
            val c = Calendar.getInstance()
            c.time = sdf.parse(dt)
            c.add(Calendar.DATE, license.validForDays)  // number of days to add
            val nowd = Calendar.getInstance()
            return (nowd.time <= c.time) and (license.deviceIdentifier == hardware.deviceIdentifier)
        }
    }
}